/***
 *
 *  1. 屏幕相关的概念:
 *      屏幕尺寸: 屏幕对角线长度   英寸
 *      屏幕分辨率: 屏幕水平方向*垂直方向 像素点的个数  750*1334  出厂就固定
 *      屏幕密度: 每英寸面积的屏幕上有多少个像素点 (ppi/dpi) 值越大,屏幕越清晰
 *
 *  2. 跟像素相关的概念:
 *      1. 物理像素:  指屏幕上发光的像素点(小灯泡)
 *      2. css像素: 指程序员写在代码中的px值
 *      // 在普通屏的时代: 一个css像素对应一个物理像素
 *      // 高清屏时代: 一个css像素,对应n个物理像素
 *      3. 设备独立像素值: 也是出场就固定的一个值   375
 *      // 如何计算到底一个css像素,对应几个物理像素:
 *      使用设备分辨率的水平值 / 设备独立像素水平值 ==> 像素比
 *      比如iphone6: 像素比是2,则一个css像素,被2个物理像素渲染
 *      比如iphone6p: 像素比是3,则一个css像素,被3个物理像素渲染
 *
 *
 *  3. 高清屏渲染位图:
 *      位图: 是由位图像素组成(类似css像素) 问题: 会失真
 *      矢量图: 动态计算画出来的. 优点:不会失真
 *
 *      在移动端位图渲染有一个问题: 在高清屏上,位图渲染会失真
 *      原因: 位图渲染想要不失真,就要保证一个物理像素,去渲染一个位图像素. 如果多个物理像素,渲染了一个位图像素就会失真.高清屏同样一块面积,用来更多的物理像素去渲染,所以最终,一个位图像素,被多个物理像素渲染出来了. 所以失真
 *      解决办法:
 *      1. 通过js获取像素比,根据当前像素比绝对实用几倍图: 比如: 如果是普通屏就使用正常尺寸的图片. 如果像素比为2的屏幕就是使用2倍图....
 *       window.devicepixelratio
 *
 *      2. (推荐)使用媒体查询
 *      @media screen and (-webkit-min-device-pixel-ratio: x){
 *
 *         将对应的图片,换成对应的倍数的图片
 *
 *      }
 *
 *
 *
 *
 *  视口:
 *
 *      pc视口(就是相当于移动端的布局视口):
 *      获取视口: document.documentElement.clientWidth
 *      视口的宽度: 决定了页面的宽度:一个盒子想占满页面,宽度值必须和视口宽度一致
 *      pc端的视口是会随着浏览器变化的
 *
 *      移动端视口:
 *       布局视口:
 *       视觉视口
 *       理想是扣:
 *
 *
 *
 *
 */
